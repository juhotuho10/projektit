Lotto simulaattori:

   Tehty 2019 Tammikuussa
   Ensimmäisiä projekteja minkä tein
   Suoritin tällä projektilla lukion tietotekniikan kurssin

   Projekti on lottosimulaattori, jossa on käyttöliittymä
   Voit kokeilla kuinka monta vuotta kestää, että voitat lotossa
   (ps. aika monta)


Alcoholic spider:

   Tehty 2021 syyskuussa
   Hauska kaverin ehdottama webcrawler joka hakee Alkon sivun html koodin ja etsii siitä kaikkien tuotteiden
   tuotedatan ja laskee kaikista alkoholi tuotteista niiden alkoholi % per litra per euro arvon,kyseisestä
   ohjelmasta saa selville Alkon parhaan hinta per alkoholi juoman

   ohjelma joutuu käymään läpi paljon html koodia, joten sen ajaminen ja RAM:iin lataaminen saattaa olla hieman hidasta, ajamisessa saattaa mennä n. 10-20 min

Minesweeper:

   Tehty 2021 marraskuussa, Yliopisto ohjelmointi 1 lopullinen projekti työ, yksin tehty
   Yksinkertainen miinaharava peli

ML-snake:
   
   Tehty 2022 elokuussa, snake peli muunneltu ML-algorytmillä ajettavaksi, custom reward funktio ja näkö suunniteltu iteroimalla muutoksia. Uusi luokka on aina inheritoinut vanhan ja    rakentanut siihen päälle, joten kaikista uusin iteraatio on alimpana (SnekEnv12)

   snake näkösignaalit ovat yksinkertaistettuna: 
   omenan positio päähän verrattuna: X ja Y [-1,0,1] (ei kerro etäisyyttä, vain suunnan)
   snake keskimmäisen palikan positio päähän verrattuna: X ja Y [-1,0,1]
   snake hännän palikan positio päähän verrattuna: X ja Y [-1,0,1]
   kuinka lähellä "vaara palikka" ( kehon osa tai reuna ) on kullakin kulkusuunnalla

   reward yksinkertaistettuna:
   *liikkuu lähemmäs omenaa (+) 
   *liikkuu kauvemmas omenasta (-) (enemmän miinusta kuin lähemmäs mentäessä saa plussaa ettei snake vain pyöri ympyrää)
   *mitä kauenpana snake on "vaara palikoista" sitä enemmän (+) tai jos tarpeeksi lähellä vaarapalikkaa niin (-) (näin snake mielummin välttelee vaaraa, sen sijaan, että ottaisi vain lyhimmän reitin omenalle)
   *omenaan osuu (+)
   *kuolee (-) 

   suhteellisen yksinkertaiset ja toimivat näkösignaalit ja rewardit, mutta niiden yksinkertaistaminen vaati paljon pohtimista, teoriaa ja yrityksiä
   huom. alkuperäinen snake peli ei ole itse tehtyä, mutta ei siitä ole kauhesti ML muutoksen jälkeen jäljelläkään, muuta kuin renderointi (löytyy tiedostosta original_snake_game.py jos
   kiinnostaa katsoa tai jos haluaa yrittää pelata paremmin kuin ML algorytmi)

   mukana tulleen valmiksi treenatun mallin voi ajaa snek_game_loading.py ja nähdä sen toimintaa
   kaikki muu on jo ennestään hoidettua eikä mitään tarvtse muuttaa
   voit asettaa RENDER = False, niin peli ajaa nopeasti 100 kierrosta loppuun, mutta näet vain konsoliin tulostetun loppupituuden jokaisen kuoleman jälkeen

   paras pituus joka tuli vastaan oli 174


Linkki Kaggle profiilin data-analyysi / ML prediktio töihin:
   https://www.kaggle.com/juhotuho10/code

